package com.bjw.ComAssistant;import android.app.Activity;import android.content.Context;import android.content.SharedPreferences;import android.content.res.Configuration;import android.os.Bundle;import android.text.InputType;import android.text.method.KeyListener;import android.text.method.NumberKeyListener;import android.text.method.TextKeyListener;import android.text.method.TextKeyListener.Capitalize;import android.util.Base64;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.RadioButton;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import android.widget.ToggleButton;import com.bjw.bean.AssistBean;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.security.InvalidParameterException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;import java.util.regex.Matcher;import java.util.regex.Pattern;import android_serialport_api.SerialPortFinder;/** * serialport api和jni取自http://code.google.com/p/android-serialport-api/ * * modify hjh 串口助手，支持1串口读写 程序载入时自动搜索串口设备 n,8,1，没得选 */public class ComAssistantActivity extends Activity {	EditText editTextRecDisp1, editTextLines, editTextCOMA;	EditText editTextTimeCOMA,editBebas;	CheckBox checkBoxAutoCOMA;	Button ButtonClear, ButtonSendCOMA;	ToggleButton toggleButtonCOMA;	Spinner SpinnerBaudRateCOMA;	RadioButton radioButtonTxt, radioButtonHex;	SerialControl ComA;// 个串口	Boolean isOpenA;// 之前串口开启状态	Boolean isRun = true;	DispQueueThread DispQueue;// 刷新显示线程	AssistBean AssistData;// 用于界面数据序列化和反序列化	long iRecBytes1 = 0;// 接收区行数	long iRecLines1 = 0;	String sFilename = "ComAssistant";	String sLinename = "AssistData";	/** Called when the activity is first created. */	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.main);		setControls();	}	@Override	public void onPause() {		saveAssistData(AssistData);		super.onPause();	}	@Override	protected void onResume() {		super.onResume();		if(DispQueue != null)		return;		isRun = true;		isOpenA = true;		DispQueue = new DispQueueThread();		DispQueue.setName("DispQueue");		DispQueue.start();		AssistData = getAssistData();		DispAssistData(AssistData);	}	@Override	public void onConfigurationChanged(Configuration newConfig) {		super.onConfigurationChanged(newConfig);		CloseComPort(ComA);	}	// ----------------------------------------------------	private void setControls() {		editTextRecDisp1 = (EditText) findViewById(R.id.editTextRecDisp1);		editTextLines = (EditText) findViewById(R.id.editTextLines);		editTextCOMA = (EditText) findViewById(R.id.editTextCOMA);		editTextTimeCOMA = (EditText) findViewById(R.id.editTextTimeCOMA);		editBebas = (EditText) findViewById(R.id.editBebas);		checkBoxAutoCOMA = (CheckBox) findViewById(R.id.checkBoxAutoCOMA);		ButtonClear = (Button) findViewById(R.id.ButtonClear);		ButtonSendCOMA = (Button) findViewById(R.id.ButtonSendCOMA);		toggleButtonCOMA = (ToggleButton) findViewById(R.id.toggleButtonCOMA);		SpinnerBaudRateCOMA = (Spinner) findViewById(R.id.SpinnerBaudRateCOMA);		radioButtonTxt = (RadioButton) findViewById(R.id.radioButtonTxt);		radioButtonHex = (RadioButton) findViewById(R.id.radioButtonHex);		radioButtonTxt.setOnClickListener(new radioButtonClickEvent());		radioButtonHex.setOnClickListener(new radioButtonClickEvent());		ButtonClear.setOnClickListener(new ButtonClickEvent());		ButtonSendCOMA.setOnClickListener(new ButtonClickEvent());		toggleButtonCOMA				.setOnCheckedChangeListener(new ToggleButtonCheckedChangeEvent());		checkBoxAutoCOMA.setOnCheckedChangeListener(new CheckBoxChangeEvent());		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(				this, R.array.baudrates_name,				android.R.layout.simple_spinner_item);		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		SpinnerBaudRateCOMA.setAdapter(adapter);		SpinnerBaudRateCOMA.setSelection(16);		SpinnerBaudRateCOMA.setOnItemSelectedListener(new ItemSelectedEvent());	}	// ----------------------------------------------------串口号或波特率变化时，关闭打开的串口	class ItemSelectedEvent implements Spinner.OnItemSelectedListener {		public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2,								   long arg3) {			if ((arg0 == SpinnerBaudRateCOMA)) {				checkBoxAutoCOMA.setChecked(false);				if(toggleButtonCOMA.isChecked()){					toggleButtonCOMA.setChecked(false);					toggleButtonCOMA.setChecked(true);				}			}		}			public void onNothingSelected(AdapterView<?> arg0) {			}		}	// ----------------------------------------------------Txt、Hex模式选择	class radioButtonClickEvent implements RadioButton.OnClickListener {		public void onClick(View v) {			if (v == radioButtonTxt) {				KeyListener TxtkeyListener = new TextKeyListener(						Capitalize.NONE, false);				editTextCOMA.setKeyListener(TxtkeyListener);				AssistData.setTxtMode(true);			} else if (v == radioButtonHex) {				KeyListener HexkeyListener = new NumberKeyListener() {					public int getInputType() {						return InputType.TYPE_CLASS_TEXT;					}					@Override					protected char[] getAcceptedChars() {						return new char[] { '0', '1', '2', '3', '4', '5', '6',								'7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',								'A', 'B', 'C', 'D', 'E', 'F' };					}				};				editTextCOMA.setKeyListener(HexkeyListener);				AssistData.setTxtMode(false);			}			editTextCOMA.setText(AssistData.getSendA());		}	}	// ----------------------------------------------------自动发送	class CheckBoxChangeEvent implements CheckBox.OnCheckedChangeListener {		public void onCheckedChanged(CompoundButton buttonView,									 boolean isChecked) {			if (buttonView == checkBoxAutoCOMA) {				if (!toggleButtonCOMA.isChecked() && isChecked) {					buttonView.setChecked(false);					return;				}				CharSequence t = editTextCOMA.getText();				char[] text = new char[t.length()];				for (int i=0; i<t.length(); i++) {					text[i] = t.charAt(i);				}				SetLoopData(ComA,text);				SetAutoSend(ComA, isChecked);			}		}	}	// ----------------------------------------------------清除按钮、发送按钮	class ButtonClickEvent implements View.OnClickListener {	//		}		public void onClick(View v) {			if (v == ButtonClear) {				editTextRecDisp1.setText("");				editTextLines.setText(R.string.zero);				iRecBytes1 = 0;// 接收区行数				iRecLines1 = 0;			} else if (v == ButtonSendCOMA) {				CharSequence t = editTextCOMA.getText();				char[] text = new char[t.length()];				for (int i=0; i<t.length(); i++) {					text[i] = t.charAt(i);				}				sendPortData(ComA,text);			}		}	}	// ----------------------------------------------------打开关闭串口,如果有重复，则提示已打开	class ToggleButtonCheckedChangeEvent implements				ToggleButton.OnCheckedChangeListener {			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked){			if (buttonView == toggleButtonCOMA) {				if (isChecked) {					CheckComA();					Toast.makeText(ComAssistantActivity.this, editBebas.getText(), Toast.LENGTH_LONG).show();				} else {					CloseComPort(ComA);					checkBoxAutoCOMA.setChecked(false);				}			}		}	}	private void CheckComA()	{			//ComA = new SerialControl(getSerialDeviceNodeByName());			ComA = new SerialControl(editBebas.getText().toString());			ComA.setBaudRate(getResources().getIntArray(R.array.baudrates_value)[SpinnerBaudRateCOMA.getSelectedItemPosition()]);			ComA.setParity(0);			OpenComPort(ComA);	}	// ----------------------------------------------------串口控制类	private class SerialControl extends SerialHelper {		public SerialControl(String sPort){			super(sPort);		}		public SerialControl() {		}		@Override		protected void onDataReceived(final byte[] ComRecData) {			// 数据接收量大或接收时弹出软键盘，界面会卡顿,可能和6410的显示性能有关			// 直接刷新显示，接收数据量大时，卡顿明显，但接收与显示同步。			// 用线程定时刷新显示可以获得较流畅的显示效果，但是接收数据速度快于显示速度时，显示会滞后。			// 最终效果差不多-_-，线程定时刷新稍好一些。			DispQueue.AddQueue(ComRecData);// 线程定时刷新显示(推荐)			DispQueue.setResume();		}	}	// ----------------------------------------------------刷新显示线程	private class DispQueueThread extends Thread {			private BlockingQueue<byte[]> QueueList = new LinkedBlockingQueue<byte[]>();			@Override			public void run() {				super.run();				while (!isInterrupted()) {					if(!isRun)						break;					while ((QueueList.size() != 0)){						if(!isRun)							break;						final byte[] ComData = QueueList.poll();						runOnUiThread(new Runnable() {							public void run() {								DispRecData(ComData);							}						});						try {							Thread.sleep(5);// 显示性能高的话，可以把此数值调小。						} catch (Exception e) {							e.printStackTrace();						}					}					synchronized (this) {						try {							wait();						} catch (InterruptedException e) {							e.printStackTrace();						}					}				}			}			public synchronized void AddQueue(byte[] ComData) {				QueueList.add(ComData);			}			//唤醒线程			public synchronized void setResume() {				notify();			}	}	// ----------------------------------------------------显示接收数据	private void DispRecData(byte[] AComRecData) {		int nComPort = AComRecData[0];		int size = AComRecData.length-1;		byte[] ComRecData =new byte[size];		System.arraycopy(AComRecData, 1, ComRecData, 0, size);		StringBuilder sMsg = new StringBuilder();		if (radioButtonTxt.isChecked()) {			sMsg.append(new String(ComRecData));		} else if (radioButtonHex.isChecked()) {			sMsg.append(MyFunc.ByteArrToHex(ComRecData));		}		if(nComPort==ComA.getnPort() && toggleButtonCOMA.isChecked()) {			editTextRecDisp1.append(sMsg);			iRecBytes1 +=size;			iRecLines1 ++;		}		editTextLines.setText(iRecBytes1+"");		if ((iRecLines1 == 500))// 达到500项自动清除		{			editTextRecDisp1.setText("");			iRecLines1 = 0;			if(iRecBytes1 >2100000000)				iRecBytes1 = 0;		}	}	// ----------------------------------------------------刷新界面数据	private void DispAssistData(AssistBean AssistData) {		editTextCOMA.setText(AssistData.getSendA());		if (AssistData.isTxt()) {			radioButtonTxt.setChecked(true);		} else {			radioButtonHex.setChecked(true);		}		editTextTimeCOMA.setText(AssistData.sTimeA);	}	// ----------------------------------------------------保存、获取界面数据	private void saveAssistData(AssistBean AssistData) {		AssistData.sTimeA = editTextTimeCOMA.getText().toString();		AssistData.isTxt = radioButtonTxt.isChecked();		if (radioButtonTxt.isChecked()) {			AssistData.SendTxtA = editTextCOMA.getText().toString();		} else {			AssistData.SendHexA = editTextCOMA.getText().toString();		}		SharedPreferences msharedPreferences = getSharedPreferences(				sFilename, Context.MODE_PRIVATE);		try {			ByteArrayOutputStream baos = new ByteArrayOutputStream();			ObjectOutputStream oos = new ObjectOutputStream(baos);			oos.writeObject(AssistData);			String sBase64 = new String(Base64.encode(baos.toByteArray(), 0));			SharedPreferences.Editor editor = msharedPreferences.edit();			editor.putString(sLinename, sBase64);			editor.commit();		} catch (IOException e) {			e.printStackTrace();		}	}	// ----------------------------------------------------	private AssistBean getAssistData() {		SharedPreferences msharedPreferences = getSharedPreferences(				sFilename, Context.MODE_PRIVATE);		AssistBean AssistData = new AssistBean();		try {			String personBase64 = msharedPreferences					.getString(sLinename, "");			byte[] base64Bytes = Base64.decode(personBase64.getBytes(), 0);			ByteArrayInputStream bais = new ByteArrayInputStream(base64Bytes);			ObjectInputStream ois = new ObjectInputStream(bais);			AssistData = (AssistBean) ois.readObject();			return AssistData;		} catch (Exception e) {			e.printStackTrace();		}		return AssistData;	}	// ----------------------------------------------------设置自动发送延时	private void SetiDelayTime(SerialHelper ComPort, String sTime) {		if(sTime.equals(""))			return;		ComPort.setiDelay(Integer.parseInt(sTime));	}	// ----------------------------------------------------设置自动发送数据	private void SetLoopData(SerialHelper ComPort, char[] sLoopData) {		if (radioButtonTxt.isChecked()) {			ComPort.setTxtLoopData(sLoopData);		} else if (radioButtonHex.isChecked()) {			ComPort.setHexLoopData(sLoopData);		}	}	// ----------------------------------------------------设置自动发送模式开关	private void SetAutoSend(SerialHelper ComPort, boolean isAutoSend) {		if (isAutoSend) {			ComPort.startSend();		} else {			ComPort.stopSend();		}	}	// ----------------------------------------------------串口发送	private void sendPortData(SerialHelper ComPort, char[] sOut) {		if (ComPort != null && ComPort.isOpen()) {			ComPort.sendData(sOut,radioButtonTxt.isChecked());		}	}	// ----------------------------------------------------关闭串口	private void CloseComPort(SerialHelper ComPort) {		if (ComPort != null) {			ComPort.destroySend();            ComPort.close();		}	}	// ----------------------------------------------------打开串口	private void OpenComPort(SerialHelper ComPort) {		try {			ComPort.open();		} catch (SecurityException e) {			if(ComPort.getnPort()==0)				toggleButtonCOMA.setChecked(false);			ShowMessage(getString(R.string.nopermission));		} catch (IOException e) {			if(ComPort.getnPort()==0)				toggleButtonCOMA.setChecked(false);			ShowMessage(getString(R.string.unknownerr));		} catch (InvalidParameterException e) {			if(ComPort.getnPort()==0)				toggleButtonCOMA.setChecked(false);			ShowMessage(getString(R.string.parametererr));		}	}	@Override	protected void onDestroy() {		if(DispQueue != null) {			isRun = false;			DispQueue.setResume();		}		CloseComPort(ComA);		android.os.Process.killProcess(android.os.Process.myPid());		System.exit(0);		super.onDestroy();	}	// ------------------------------------------显示消息	private void ShowMessage(String sMsg) {		Toast.makeText(this, sMsg, Toast.LENGTH_SHORT).show();	}	protected String getSerialDeviceNodeByName(){		String keyword = "devices/platform/soc/4e00000.ssusb/4e00000.dwc3/xhci-hcd.2.auto/usb1/1-1/1-1.5/1-1.5:1.0";		String ttyUSBPattern = "ttyUSB\\d+";		ShellUtils.CommandResult rst =ShellUtils.execCommand("ls -l /sys/class/tty/tty*",false);        if(rst.result == 0){			String info= rst.successMsg;			if(info == null){				return "unknown";			}			String[] lines= info.split("->");			if(lines!=null){				for(String line:lines){					if(line.contains(keyword)){						Pattern pattern = Pattern.compile(ttyUSBPattern);						Matcher matcher = pattern.matcher(line);						if (matcher.find()) {							String ttyUSBInfo = matcher.group();								return "/dev/"+ttyUSBInfo;						}					}				}			}		}		return  "unknown";	}}